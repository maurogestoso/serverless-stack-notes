service: notes-app-api

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  tags:
    projectName: ${self:provider}

plugins:
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function

custom:
  resourcePrefix: ${self:service}-${self:provider.stage}

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  create:
    handler: bin/create
    events:
      - http:
          path: notes
          method: post
    environment:
      NOTES_TABLE_NAME: !Ref NotesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NotesTable.Arn

resources:
  Outputs:
    UserPoolId:
      Value: !Ref UserPool
    UserPoolClientId:
      Value: !Ref UserPoolClient
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resourcePrefix}-uploads
        CorsConfiguration: 
          CorsRules:
            - 
              AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, HEAD, DELETE]
              AllowedOrigins: ['*']
              MaxAge: 3000
        Tags: 
          - 
            Key: projectName
            Value: ${self:service}
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.resourcePrefix}-notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions: 
          - 
            AttributeName: userId
            AttributeType: S
          - 
            AttributeName: noteId
            AttributeType: S
        KeySchema: 
          - 
            AttributeName: userId
            KeyType: HASH
          - 
            AttributeName: noteId
            KeyType: RANGE
        Tags: 
          - 
            Key: projectName
            Value: ${self:service}
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        UsernameAttributes: 
          - email
        UserPoolName: ${self:custom.resourcePrefix}
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        UserPoolId: !Ref UserPool
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        Domain: "maurogestoso-notes-app"
        UserPoolId: !Ref UserPool